IS 1
------

int j = ar_size-1;
 int v = ar[j];
 while(v < ar[j-1]) {
 ar[j] = ar[j-1];
 j--;
 print(ar_size, ar);
 }
 ar[j] = v;
 print(ar_size, ar);

-------------------------------------------------------------------------------------------

IS 2
-----

for (int i = 1; i < ar_size; ++i) {
 int j = i - 1;
 int p = ar[i];
 while (j >= 0 && p < ar[j]) {
 ar[j+1] = ar[j];
 j--;
 }
 ar[j+1] = p;
 printf("%d", ar[0]);
 for (int k = 1; k < ar_size; ++k) {
 printf(" %d", ar[k]);
 }
 printf("\n");
 }

-------------------------------------------------------------------------------------------

Correct Loop Invariant
-------------------------

int i,j;
 int value;
 for(i=1;i<ar_size;i++)
 {
 value=ar[i];
 j=i-1;
 while(j>=0 && value<ar[j])
 {
 ar[j+1]=ar[j];
 j=j-1;
 }
 ar[j+1]=value; 
 }
 for(j=0;j<ar_size;j++)
 {
 printf("%d",ar[j]);
 printf(" ");
 }

-------------------------------------------------------------------------------------------

RT Algo
--------

int temp=ar[ar_size-1],i;
 for(i=ar_size-2;i>=0;i--)
 {
 if(ar[i]>temp){
ar[i+1]=ar[i];
*shifts=*shifts+1;
}
 else
break;
 
 }
 ar[i+1]=temp;

-------------------------------------------------------------------------------------------

CS 1
-----

scanf("%d",&n);
 
 for(i=0;i<100;i++)
 { 
 b[i]=0;
 }
 for(i=0;i<n;i++)
 { 
 scanf("%d",&a);
 b[a]++;
 }
 for(i=0;i<100;i++)
 { 
 printf("%d ", b[i]);
 }

------------------------------------------------------------------------------------------

Close Num
-----------

quickSort(a,0,n-1);
int min=a[1]-a[0];
for(i=2;i<n;i++)
if(a[i]-a[i-1]<min) min=a[i]-a[i-1];
for(i=1;i<n;i++)
if(a[i]-a[i-1]==min) printf("%d %d ",a[i-1],a[i]);
printf("\n");

-------------------------------------------------------------------------------------------

Ice cream
----------

scanf("%d%d",&c,&l);
 for(i=0;i<l;i++)
 scanf("%d",&arr[i]);
 for(i=0;i<l-1;i++)
 for(j=i+1;j<l;j++)
 {
 if(arr[i]+arr[j]==c)
 printf("%d %d\n",i+1,j+1);
 }

-------------------------------------------------------------------------------------------



